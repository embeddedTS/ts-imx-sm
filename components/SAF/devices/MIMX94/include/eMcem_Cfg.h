/**
*   @file    eMcem_Cfg.h
*   @version 0.8.4
*
*   @brief   MIMX9XX_SAF eMcem - Configuration Header.
*   @details Contains declarations of the eMcem configuration.
*
*   @addtogroup EMCEM_COMPONENT
*   @{
*/
/*==================================================================================================
*   Project              : MIMX9XX_SAF
*   Platform             : CORTEXM
*
*   SW Version           : 0.8.4
*   Build Version        : MIMX9_SAF_0_8_4_20250110
*
*   Copyright 2025 NXP
*   Detailed license terms of software usage can be found in the license.txt
*   file located in the root folder of this package.
==================================================================================================*/

#ifndef EMCEM_CFG_H
#define EMCEM_CFG_H

#ifdef __cplusplus
extern "C" {
#endif

/**
* @page misra_violations MISRA-C:2012 violations
*
* @section eMcem_Cfg_h_REF_0501
* Violates MISRA 2012 Required Rule 5.1, Supported compilers do not enforce maximum symbol length to be less than 32 characters.
*
* @section eMcem_Cfg_h_REF_0502
* Violates MISRA 2012 Required Rule 5.2, Supported compilers do not enforce maximum symbol length to be less than 32 characters.
*
* @section eMcem_Cfg_h_REF_0504
* Violates MISRA 2012 Required Rule 5.4, Supported compilers do not enforce maximum symbol length to be less than 32 characters.
*
* @section eMcem_Cfg_h_REF_0505
* Violates MISRA 2012 Required Rule 5.5, Supported compilers do not enforce maximum symbol length to be less than 32 characters.
*
* @section eMcem_Cfg_h_REF_0809
* Violates MISRA 2012 Advisory Rule 8.9, An object should be defined at block scope.
* This variable cannot be defined at block scope as it is being generated by configuration tool.
*
*/

/*==================================================================================================
*                                        INCLUDE FILES
* 1) system and project includes
* 2) needed interfaces from external units
* 3) internal and external interfaces from this unit
==================================================================================================*/
#include "MIMX9XX_SAF_Version.h"
#include "eMcem_Types_Ext.h"

/*==================================================================================================
*                              SOURCE FILE VERSION INFORMATION
==================================================================================================*/
/*!
 * @name eMCEM configuration SW version
 */

/** @{ */
/*!
 * @brief    eMCEM configuration - SW major version
 */
#define EMCEM_CFG_SW_MAJOR_VERSION             0
/*!
 * @brief    eMCEM configuration - SW minor version
 */
#define EMCEM_CFG_SW_MINOR_VERSION             8
/*!
 * @brief    eMCEM configuration - SW patch version
 */
#define EMCEM_CFG_SW_PATCH_VERSION             4
/** @} */

/*==================================================================================================
*                                     FILE VERSION CHECKS
==================================================================================================*/
/* Check if current file and MIMX9XX_SAF version header file are of the same software version */
#if ((EMCEM_CFG_SW_MAJOR_VERSION != MIMX9XX_SAF_SW_MAJOR_VERSION) || \
     (EMCEM_CFG_SW_MINOR_VERSION != MIMX9XX_SAF_SW_MINOR_VERSION) || \
     (EMCEM_CFG_SW_PATCH_VERSION != MIMX9XX_SAF_SW_PATCH_VERSION))
    #error "Software Version Numbers of eMcem_Cfg.h and MIMX9XX_SAF version are different"
#endif

/*==================================================================================================
*                                          CONSTANTS
==================================================================================================*/


/*=================================================================================================
*                                      DEFINES AND MACROS
=================================================================================================*/
/*!
 * @name EMCEM feature configuration
 */
/** @{ */
/*!
 * @brief    Availability of test API for sCheck module.
 *           sCheck module needs to be present in configuration to enable this option.
 */
#define EMCEM_TEST_API_AVAILABLE        (STD_OFF)

/*!
 * @brief    Enable/Disable fault statistics.
 *           Mode Selector module needs to be present in configuration to allow enabling of this option.
 */
#define EMCEM_FAULT_STATISTICS_ENABLED  (STD_OFF)

/*!
 * @brief    Enable/Disable fault NVM backup functionality.
 *           Mode Selector module needs to be present in configuration and the NVM Storage must be enabled to allow enabling of this option.
 */
#define EMCEM_FAULT_NVM_BACKUP_ENABLED  (STD_OFF)

/*!
 * @brief    Enable/Disable extended diagnostics.
 */
#define EMCEM_EXT_DIAG_ENABLED          (STD_OFF)

/*!
 * @brief    Array size for static fault masks.
 */
#define EMCEM_FAULT_MASK_ARRAY_SIZE     (4U)
/** @} */

/*=================================================================================================
*                                             ENUMS
=================================================================================================*/


/*=================================================================================================
*                                STRUCTURES AND OTHER TYPEDEFS
=================================================================================================*/
/*!
 * EMCEM FCCU configuration structure type
 *
 * Type to configure the fault reaction.
 */
typedef struct
{
    const uint8                             u8FaultHandlerId; /*!< Fault handler Id */
    const boolean                           bEnabled; /*!< Fault config enabled */
    const uint32                            u32ImmReaction[EMCEM_REACTION_SET_COUNT]; /*!< Immediate reaction */
    const uint32                            u32DelReaction[EMCEM_REACTION_SET_COUNT]; /*!< Delayed reaction */
    const uint32                            u32FaultEnabled[EMCEM_CVFCCU_FAULT_ENABLE_REG_COUNT]; /*!< Fault enabled */
    const uint32                            u32FaultReactionSet[EMCEM_CVFCCU_REACTION_SET_REG_COUNT]; /*!< Fault reaction set */
    const eMcem_FccuHandlerType             eMcem_AlarmHandler[EMCEM_CVFCCU_MAX_FAULTS]; /*!< eMCEM alarm handler */
} eMcem_CVfccuFhidCfgType;

/*!
 * EMCEM EOUT configuration type
 *
 * Type to configure the EOUT.
 */
typedef struct
{
    const uint32                            u32EoutTimerDisabled; /*!< Eout timer disabled */
    const uint32                            u32EoutPin[EMCEM_EOUT_PIN_COUNT]; /*!< Control mode, InvertInput, InputBufferEnabled, OutputBufferEnableValid */
    const uint32                            u32EoutOperatingMode[EMCEM_EOUT_PIN_COUNT]; /*!< Invert EOUT signaling, operating mode */
} eMcem_EoutCfgType;

/*!
 * EMCEM FCCU Instance configuration type
 *
 * Type to configure FCCU instance.
 */
typedef struct
{
    const boolean                           bDebugEnabled; /*!< Enable debug */
    const uint32                            u32GlobalReactionTimerPeriod; /*!< Global reaction timer period cfg */
    const uint32                            u32MinEoutDuration; /*!< Eout duration cfg */
    const eMcem_EoutCfgType                 eMcem_EoutCfg; /*!< EOUT cfg */
    const uint32                            au32Recovery[EMCEM_CVFCCU_FAULT_RECOVERY_REG_COUNT]; /*!< Fault lines cfg */
    const eMcem_CVfccuFhidCfgType           eMcem_FhidCfg; /*!< FHID cfg */
} eMcem_CVfccuInstanceCfgType;

/*!
 * Configuration struct type.
 *
 * eMCEM driver configuration structure type.
 */
typedef struct
{
    const uint32                            u32ControlledEimInstances; /*!< Bitfield representing EIM instances controlled by current eMCEM instance */
    const uint32                            u32ControlledSramcInstances; /*!< Bitfield representing SRAMC instances controlled by current eMCEM instance */
    const uint32                            u32ControlledDdrcInstances; /*!< Bitfield representing DDRC instances controlled by current eMCEM instance */
    const uint32                            u32ControlledErmInstances; /*!< Bitfield representing ERM instances controlled by current eMCEM instance */
    const eMcem_CVfccuInstanceCfgType       *eMcem_CVfccuCfg; /*!< EMCEM VFCCU configuration */
} eMcem_ConfigType;

/*=================================================================================================
*                                GLOBAL VARIABLE DECLARATIONS
=================================================================================================*/
/*!
 * @brief    Macro marking the beginnning of CONFIG_DATA_UNSPECIFIED section. The memory section for configuration data with undefined size.
 */
#define EMCEM_START_SEC_CONFIG_DATA_UNSPECIFIED
#include "eMcem_MemMap.h"

/*!
 * @brief    eMCEM VFCCU Instance configuration struct type.
 */
/* @violates @ref eMcem_Cfg_h_REF_0809 */
extern const eMcem_CVfccuInstanceCfgType CVfccuCfg;

/*!
 * @brief    eMCEM configuration structures.
 */
/* @violates @ref eMcem_Cfg_h_REF_0809 */
extern const eMcem_ConfigType eMcem_Config;

/*!
 * @brief    Macro marking the end of CONFIG_DATA_UNSPECIFIED section.
 */
#define EMCEM_STOP_SEC_CONFIG_DATA_UNSPECIFIED
#include "eMcem_MemMap.h"

/*!
 * @brief    Macro marking the beginnning of CONST_32 section. The memory section for constants of type uint32.
 */
#define EMCEM_START_SEC_CONST_32
#include "eMcem_MemMap.h"

/*!
 * @brief    Array for masking out of the VFCCU, EIM and SRAMC reserved faults.
 */
/* @violates @ref eMcem_Cfg_h_REF_0809 */
extern const uint32 eMcem_au32StaticFaultMasks[EMCEM_FAULT_MASK_ARRAY_SIZE];

/*!
 * @brief    Macro marking the end of CONST_32 section.
 */
#define EMCEM_STOP_SEC_CONST_32
#include "eMcem_MemMap.h"

/* @violates @ref eMcem_Cfg_h_REF_0501 */
/* @violates @ref eMcem_Cfg_h_REF_0502 */
/* @violates @ref eMcem_Cfg_h_REF_0504 */
/* @violates @ref eMcem_Cfg_h_REF_0505 */
/*!
 * @brief    Macro marking the beginnning of VAR_NO_INIT_UNSPECIFIED section. This is Memory Section
 *           for variables, structures, arrays, when the SIZE (alignment) does not fit the criteria
 *           of 8, 16 or 32 bit. These variables are not initialized with values after every reset.
 */
#define EMCEM_START_SEC_VAR_NO_INIT_UNSPECIFIED_NO_CACHEABLE
#include "eMcem_MemMap.h"
/*!
 * @brief    eMCEM pointer to configuration structure.
 */
extern const eMcem_ConfigType *eMcem_pConfigPtr;

/* @violates @ref eMcem_Cfg_h_REF_0501 */
/* @violates @ref eMcem_Cfg_h_REF_0502 */
/* @violates @ref eMcem_Cfg_h_REF_0504 */
/* @violates @ref eMcem_Cfg_h_REF_0505 */
/*!
 * @brief    Macro marking the end of VAR_NO_INIT_UNSPECIFIED_NO_CACHEABLE section.
 */
#define EMCEM_STOP_SEC_VAR_NO_INIT_UNSPECIFIED_NO_CACHEABLE
#include "eMcem_MemMap.h"

/*==================================================================================================
*                                    FUNCTION PROTOTYPES
==================================================================================================*/
/*!
 * @brief    Macro marking the beginnning of CODE section. The memory section for code.
 */
#define EMCEM_START_SEC_CODE
/* @violates @ref eMcem_Cfg_c_REF_0410 */
#include "eMcem_MemMap.h"

/*!
 * @brief    Default Alarm Handler function.
 *
 * @param[in]     nFaultId      Id of the fault
 *
 * @return     eMcem_ErrRecoveryType
 * @retval           EMCEM_ERR_RECOVERED      fault has been recovered successfully.
 * @retval           EMCEM_ERR_NOT_RECOVERED  fault has not been recovered.
 */
extern eMcem_ErrRecoveryType eMcemCVfccuDefaultAlarmHandler( eMcem_FaultType nFaultId );

/*!
 * @brief    Alarm Handler function.
 *
 * @param[in]     nFaultId      Id of the fault
 *
 * @return     eMcem_ErrRecoveryType
 * @retval           EMCEM_ERR_RECOVERED      fault has been recovered successfully.
 * @retval           EMCEM_ERR_NOT_RECOVERED  fault has not been recovered.
 */
extern eMcem_ErrRecoveryType eMcemCVfccuAlarmHandler( eMcem_FaultType nFaultId );

/*!
 * @brief    Macro marking the end of CODE section.
 */
#define EMCEM_STOP_SEC_CODE
/* @violates @ref eMcem_Cfg_c_REF_0410 */
/* @violates @ref eMcem_Cfg_c_REF_2001 */
#include "eMcem_MemMap.h"

#ifdef __cplusplus
}
#endif

#endif  /* EMCEM_CFG_H */

/** @} */
